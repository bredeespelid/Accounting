reset;
# Load the model
model Mindemyren.mod;

# Load the data
data Mindemyren.dat;

# Set the solver to Gurobi
option solver gurobi;

# Solve the problem
solve;

# Display results
printf "Optimal Routes:\n";

for {d in DAYS} {
    printf "\nDay: %s\n", d;
    printf "Start at Mindemyren\n";
    
    let current := 'Mindemyren';

    repeat {
        # Find the next location based on x[d,current,j]
        for {j in BAKERIES: j != current} {
            if x[d,current,j] > 0.5 then {
                if j != 'Mindemyren' then
                    printf "From %s to %s (Priority: %d)\n", 
                           current, j, PRIORITY[d,j];
                else
                    printf "From %s to %s\n", current, j;
                let current := j;
                break;
            }
        }
    } until current = 'Mindemyren';

    printf "End at Mindemyren\n";
    printf "Total Travel Time for %s: %.2f minutes (%.2f hours)\n", d, 
           sum{i in BAKERIES, j in BAKERIES: i != j} DISTANCE[i,j] * TRAVEL_TIME_PER_KM * x[d,i,j] + 
           card(BAKERIES) * UNLOADING_TIME, 
           (sum{i in BAKERIES, j in BAKERIES: i != j} DISTANCE[i,j] * TRAVEL_TIME_PER_KM * x[d,i,j] + 
           card(BAKERIES) * UNLOADING_TIME) / 60;
}

printf "\nOverall Total Travel Time: %.2f minutes (%.2f hours)\n", TotalTime, TotalTime/60;
